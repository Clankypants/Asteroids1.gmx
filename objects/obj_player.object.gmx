<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create player

// set direction to up
image_angle = 90;

// set animation speed for associated animations
image_speed = 1 / 6;

// set temporary warp protection
global.warp = true;

// set shield power
global.shieldpower = 100;

// set thrust value
thrust = false;

// set shield angle
shield_angle = -1;
shield_timer = 30;
shield_glow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy
// get the global x and y speeds
global_x_speed = lengthdir_x(global.globalspeed, global.globaldirection);
global_y_speed = lengthdir_y(global.globalspeed, global.globaldirection);

var randomangle = random(360);
var o;
for (i = 0; i &lt; 6; i++) {
    o = instance_create(x, y, obj_deadplayer);
    o.angle = (i * 60) + randomangle;
    o.map[? "basespeed"] = random(3) + 1;
    o.map[? "basedirection"] = o.angle;
    
    // get the x and y speeds
    o_x_speed = lengthdir_x(o.map[? "basespeed"], o.map[? "basedirection"]);
    o_y_speed = lengthdir_y(o.map[? "basespeed"], o.map[? "basedirection"]);
    // calculate new x and y speeds for dead player debris
    o_x_speed += global_x_speed;
    o_y_speed += global_y_speed;
    // apply new direction and speed to dead player debris
    o.map[? "basespeed"] = point_distance(0, 0, o_x_speed, o_y_speed);
    o.map[? "basedirection"] = point_direction(0, 0, o_x_speed, o_y_speed);
    
    o.image_angle = o.angle;
}
if (global.life &gt; 0) {
    global.life -= 1;
}
global.globalspeed = 0;
instance_create(room_width / 2, room_height / 2, obj_screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player updates

// if ship passes beyond wrap, rotate ship to point toward center
if (x &lt; -100 || x &gt; room_width + 100 || y &lt; -100 || y &gt; room_width + 100) {
    direction = point_direction(x, y, room_width / 2, room_width / 2);
}

// drop shield glow
if (shield_glow &gt; 0) {
    shield_glow--;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision effects

// impact with asteroid
if (!global.warp) {
    // shield flash
    shield_angle = point_direction(x, y, other.x, other.y);
    shield_glow = shield_timer;
    global.shieldpower -= other.map[? "hp"] / 2;
    if (global.shieldpower &lt;= 0) global.shieldpower = 0;
    // generate debris if shields are down
    if (global.shieldpower &lt;= 0) {
        instance_destroy();
    } else {
        // get player's current speed
        x_speed = lengthdir_x(global.globalspeed, global.globaldirection);
        y_speed = lengthdir_y(global.globalspeed, global.globaldirection);
        // get asteroid's speed and direction
        asteroid_x_speed = lengthdir_x(100, other.map[? "basedirection"]);
        asteroid_y_speed = lengthdir_y(100, other.map[? "basedirection"]);
        // calculate the new x and y speeds for the player
        x_speed += asteroid_x_speed;
        y_speed += asteroid_y_speed;
        // apply the new direction and speed for the player
        global.globaldirection = point_direction(x, y, x + x_speed, y + y_speed);
        global.globalspeed = point_distance(x, y, x + x_speed, y + y_speed);
        // limit globalspeed
        if (global.globalspeed &gt; 3) {
            global.globalspeed = 3;
        }
    }
    // destroy asteroid
    with(other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Brake
if (global.globalspeed &gt; 0) {
    global.globalspeed -= 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn Right
image_angle = image_angle - 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Thrust

// add thrust power up to max
//motion_add(image_angle,0.2);
// get the x and y speed of the current global
x_speed = lengthdir_x(global.globalspeed, global.globaldirection);
y_speed = lengthdir_y(global.globalspeed, global.globaldirection);
// thrust x and y speeds
thrust_x_speed = 0.2 * cos(pi / 180 * image_angle);
thrust_y_speed = 0.2 * sin(pi / 180 * image_angle);
// calculate the new x and y speeds for global
x_speed += thrust_x_speed;
y_speed -= thrust_y_speed;
// apply new direction and speed to global
global.globaldirection = point_direction(0, 0, x_speed, y_speed);
global.globalspeed = point_distance(0, 0, x_speed, y_speed);
//global.globaldirection = image_angle;
//global.globalspeed += 0.2;
if (global.globalspeed &gt; 5) {
    global.globalspeed = 5;
}

// draw thrust animation
draw_sprite_ext(spr_thrust,image_index,x,y,1,1,image_angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn Left
image_angle = image_angle + 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw sprite and animations

// draw warp animation
if (global.warp) {
    draw_sprite(spr_warp,image_index,x,y);
}

// draw thruster animations
if (keyboard_check(vk_up)) {
    draw_sprite_ext(spr_thrust,image_index,x,y,1,1,image_angle,-1,1);
}
if (keyboard_check(vk_left)) {
    draw_sprite_ext(spr_turnleft,image_index,x,y,1,1,image_angle,-1,1);
}
if (keyboard_check(vk_right)) {
    draw_sprite_ext(spr_turnright,image_index,x,y,1,1,image_angle,-1,1);
}
if (keyboard_check(vk_down)) {
    draw_sprite_ext(spr_brake,image_index,x,y,1,1,image_angle,-1,1);
}

// draw ship
draw_sprite_ext(spr_player,1,x,y,1,1,image_angle,-1,1);

// draw shield
if (shield_glow &gt; 0) {
    draw_sprite_ext(spr_shield,1,x,y,1,1,shield_angle,-1,shield_glow / shield_timer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shields
if (global.debug) {
    if (global.warp) {
        global.warp = false;
    } else {
        global.warp = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///super power shot
if (global.debug) {
    if (global.super) {
        global.super = false;
    } else {
        global.super = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fire

// create bullet
bullet = instance_create(x, y, obj_bullet);

// set speed and direction
bullet.speed = 15;
bullet.map[? "basespeed"] = bullet.speed;
bullet.direction = image_angle;
bullet.map[? "basedirection"] = bullet.direction;
bullet.image_angle = image_angle;

// reset shotpower
global.shotpower = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
