<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_asteroid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create asteroid
while (distance_to_object(obj_player) &lt; 100) {
    x = 100 + random(room_width - 200);
    y = 100 + random(room_height - 200);
}

image_angle = irandom(360);
rotationspeed = -1 + random(2);
image_speed = 0;
image_index = irandom(2);
basedirection = irandom(360);
direction = basedirection;
basespeed = 0.5 + random(2);
speed = basespeed;
hp = 80 + irandom(20);

// create radar blip
blip = instance_create(room_width / 2, room_height / 2, obj_radarblip);
blip.asteroid = id;

bug = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blow up

// play explosion animation
explosion_instance = instance_create(x,y,obj_explosion_l);
explosion_instance.direction = direction;
explosion_instance.speed = speed;
explosion_instance.rotationspeed = rotationspeed;

// spawn mini asteroids
for (i = 0; i &lt;= random(3); i++) { 
    instance_create(x,y,obj_asteroid_s);
}

// get points!
global.points = global.points + 50;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rotate sprite
image_angle += rotationspeed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set relative vector
// get the x and y speeds of the asteroid
x_speed = lengthdir_x(basespeed, basedirection);
y_speed = lengthdir_y(basespeed, basedirection);
//burst_direction = point_direction(other.x, other.y, x, y);
global_x_speed = lengthdir_x(global.globalspeed, global.globaldirection + 180);
global_y_speed = lengthdir_y(global.globalspeed, global.globaldirection + 180);
// calculate the new x and y speeds for the asteroid
x_speed += global_x_speed;
y_speed += global_y_speed;
// apply the new direction and speed for the asteroid
direction = point_direction(x, y, x + x_speed, y + y_speed);
speed = point_distance(x, y, x + x_speed, y + y_speed);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>wrap_object</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bulletburst">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///impact physics

// get the x and y speeds of the asteroid
x_speed = lengthdir_x(basespeed, basedirection);
y_speed = lengthdir_y(basespeed, basedirection);
//burst_direction = point_direction(other.x, other.y, x, y);
burst_x_speed = lengthdir_x(.2, other.image_angle);
burst_y_speed = lengthdir_y(.2, other.image_angle);
// calculate the new x and y speeds for the asteroid
x_speed += burst_x_speed;
y_speed += burst_y_speed;
// apply the new direction and speed for the asteroid
basedirection = point_direction(x, y, x + x_speed, y + y_speed);
basespeed = point_distance(x, y, x + x_speed, y + y_speed);
// limit basespeed
if (basespeed &gt; 3) {
    basespeed = 3;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw asteroid
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, image_angle, c_white, 1);
// debug display
if (global.debug) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_set_font(fnt_small);
    draw_text(x,y,string(hp));
    if (bug) {
        draw_sprite(spr_bug, 0, x, y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="96">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy all asteroids
if (global.debug) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
