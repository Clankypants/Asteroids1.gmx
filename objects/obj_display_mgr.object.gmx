<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Properties

ideal_w = 450;
ideal_h = 450;
zoom = 1;
max_zoom = 1;
max_w = display_get_width();
max_h = display_get_height();
aspect = max_w / max_h;

// calculate max zoom
var max_zoom_w = floor(max_w / ideal_w);
var max_zoom_h = floor(max_h / ideal_h);
if (max_zoom_w &lt; max_zoom_h) {
    max_zoom = max_zoom_w;
} else {
    max_zoom = max_zoom_h;
}

if (max_w &lt; max_h) { // portait
    var view_w = min(ideal_w, max_w);
    var view_h = view_w / aspect;
} else { // landscape
    var view_h = min(ideal_h, max_h);
    var view_w = view_h * aspect;
}

// set for current room
view_wview[0] = floor(view_w);
view_hview[0] = floor(view_h);
view_wport[0] = max_w;
view_hport[0] = max_h;

// set for next room(s)
for (var i = 1; i &lt;= room_last; i++) {
    if (room_exists(i)) {
        view_x = (room_width / 2) - (ideal_w / 2);
        view_y = (room_height / 2) - (ideal_h / 2);
        room_set_view(i, 0, true, floor(view_x), floor(view_y), floor(view_w), floor(view_h), 0, 0, max_w, max_h, 0, 0, 0, 0, -1);
    }
}

surface_resize(application_surface, view_wview[0], view_hview[0]);
window_set_size(ideal_w, ideal_h);
alarm[0] = 1;
room_goto(room_next(room));

// set window h/w to detect if they are changed
window_h = window_get_height();
window_w = window_get_width();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for screen size changes

// zoom window
if (keyboard_check_pressed(ord("Z"))) {
    zoom++;
    if (zoom &gt; max_zoom) zoom = 1;
    window_set_size(ideal_w * zoom, ideal_h * zoom);
    alarm[0] = 1;
}

// toggle Fullscreen
if (keyboard_check_pressed(ord("F"))) {
    if window_get_fullscreen() {
        window_set_fullscreen(false);
    } else {
        window_set_fullscreen(true);
    }
}

// set view size based on window size
if ((window_h != window_get_height()) || (window_w != window_get_width())) {
    var new_w = max(1, window_get_width());
    var new_h = max(1, window_get_height());
    
    // set zoom
    var zoom_w = floor(new_w / ideal_w);
    var zoom_h = floor(new_h / ideal_h);
    if (zoom_w &gt; zoom_h) {
        if (zoom_w - zoom_h &gt;= 2) {
            zoom = zoom_h + 1;
        } else {
            zoom = zoom_w;
        }
    } else {
        if (zoom_h - zoom_w &gt;= 2) {
            zoom = zoom_w + 1;
        } else {
            zoom = zoom_h;
        }
    }
    if (zoom &lt; 1) zoom = 1;
    
    // scale by zoom
    new_w = floor(new_w / zoom);
    new_h = floor(new_h / zoom);
    
    view_wview[0] = new_w;
    view_hview[0] = new_h;
    view_wport[0] = new_w;
    view_hport[0] = new_h;
    view_xview[0] = (room_width / 2) - floor(new_w / 2);
    view_yview[0] = (room_height / 2) - floor(new_h / 2);
    
    surface_resize(application_surface, new_w, new_h);
    
    // set window h/w to detect if they are changed
    window_h = window_get_height();
    window_w = window_get_width();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
